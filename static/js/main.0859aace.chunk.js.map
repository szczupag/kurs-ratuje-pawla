{"version":3,"sources":["assets/close.svg","assets/minimize.svg","assets/maximize.svg","assets/pointer.svg","assets/e00_diagram.png","assets/e01_struktura.png","services/history.js","CustomLink/index.js","Button/index.js","Main/index.js","Main/fb.js","Excercises/Navigation/index.js","Excercises/Template/index.js","Excercises/e00.js","Excercises/e01.js","Excercises/e02.js","Excercises/e03.js","Excercises/e04.js","routes.js","ScrollToTop.js","App.js","index.js"],"names":["module","exports","history","createBrowserHistory","CustomLink","to","children","Button","style","onClick","className","Main","src","min","max","close","fontSize","target","href","pointer","Navigation","Template","nextStep","Excercise","diagram","class","language","CustomRoute","path","component","other","Routes","e00","e01","e02","e03","e04","Fb","exact","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","App","basename","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0859aace.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.a2338291.svg\";","module.exports = __webpack_public_path__ + \"static/media/minimize.7a132f75.svg\";","module.exports = __webpack_public_path__ + \"static/media/maximize.2cd58352.svg\";","module.exports = __webpack_public_path__ + \"static/media/pointer.29a7e036.svg\";","module.exports = __webpack_public_path__ + \"static/media/e00_diagram.cae758fb.png\";","module.exports = __webpack_public_path__ + \"static/media/e01_struktura.3a51e934.png\";","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst CustomLink = ({\n  to,\n  children,\n}) => (\n  <NavLink to={to}>\n  {/* <NavLink to={`${process.env.PUBLIC_URL}/${to}`}> */}\n    {children}\n  </NavLink>\n)\n\nexport default CustomLink","import React from 'react'\nimport CustomLink from '../CustomLink'\n\nimport './style.css'\n\nconst Button = ({\n    children,\n    style,\n    onClick,\n    to,\n}) => (\n    <div\n        className=\"jump-btn\" style={style}\n        onClick={onClick}\n    >\n        <CustomLink to={to}>\n            {children}\n        </CustomLink>\n    </div>\n)\n\nexport default Button\n","import React from 'react'\nimport Button from '../Button'\nimport close from '../assets/close.svg'\nimport min from '../assets/minimize.svg'\nimport max from '../assets/maximize.svg'\nimport pointer from '../assets/pointer.svg'\n\nimport './style.css'\n\nconst Main = () => (\n    <div className=\"main-container fb\">\n        <div className=\"fb-banner\">\n            <div className=\"fb-header\">\n                <p className=\"fb-title\">Ratujemy Pawła</p>\n                <p><img src={min} /></p>\n                <p><img src={max} /></p>\n                <p><img src={close} /></p>\n            </div>\n            <div className=\"fb-content\">\n                <p>Kurs</p>\n                <p style={{ fontSize: '2.8rem' }}>Podstawy HTML i CSS</p>\n            </div>\n            <div className=\"fb-footer\">\n                <Button\n                    to=\"/wprowadzenie\"\n                >\n                    Zaczynamy\n                </Button>\n            </div>\n        </div>\n        <div className=\"fb-link\">\n            <a target=\"_blank\" href=\"siepomaga.pl/ratujemy-pawla\">siepomaga.pl/ratujemy-pawla</a>\n        </div>\n    </div>\n)\n\nexport default Main\n","import React from 'react'\nimport Button from '../Button'\nimport close from '../assets/close.svg'\nimport min from '../assets/minimize.svg'\nimport max from '../assets/maximize.svg'\nimport pointer from '../assets/pointer.svg'\n\nimport './style.css'\n\nconst Main = () => (\n    <div className=\"main-container fb\">\n        <div className=\"fb-banner\">\n            <div className=\"fb-header\">\n                <p className=\"fb-title\">Ratujemy Pawła</p>\n                <p><img src={min} /></p>\n                <p><img src={max} /></p>\n                <p><img src={close} /></p>\n            </div>\n            <div className=\"fb-content\">\n                <p>Kurs</p>\n                <p style={{fontSize: '2.8rem'}}>Podstawy HTML i CSS</p>\n            </div>\n            <div className=\"fb-footer\">\n                <p className=\"fb-btn\">Biorę udział</p>\n                <img src={pointer} />\n            </div>\n        </div>\n        <div className=\"fb-link\">siepomaga.pl/ratujemy-pawla</div>\n    </div>\n)\n\nexport default Main\n","import React from 'react'\nimport CustomLink from '../../CustomLink'\n\nimport s from './style.css'\n\nconst Navigation = () => (\n    <div className=\"navigation\">\n        <ul>\n            <li><CustomLink to=\"/wprowadzenie\">Wprowadzenie</CustomLink></li>\n            <li><CustomLink to=\"/struktura-html\">Struktura dokumentu</CustomLink></li>\n            <li><CustomLink to=\"/tagowanie-tekstu\">Tagowanie tekstu</CustomLink></li>\n            <li><CustomLink to=\"/lista\">Lista</CustomLink></li>\n            <li><CustomLink to=\"/obrazy\">Obrazy</CustomLink></li>\n        </ul>\n    </div>\n)\n\nexport default Navigation","import React from 'react'\nimport Button from '../../Button'\nimport Navigation from '../Navigation'\n\nimport s from './style.css'\n\nconst Template = ({\n    children,\n    nextStep\n}) => (\n    <div className=\"container template-container\">\n        <div className=\"header\">\n            <h1>Podstawy HTML i CSS</h1>\n            <a target=\"_blank\" href=\"https://www.facebook.com/RatujemyPawla/\">💫 Ratujemy Pawła!</a>\n        </div>\n        <div className=\"row content\">\n            <div className=\"nav-column\">\n                <Navigation />\n            </div>\n            <div className=\"content-column\">\n                <div className=\"content-wrapper\">\n                    {children}\n                    <div className=\"btn-wrapper-right\">\n                        <Button\n                            to={nextStep}\n                        >\n                            Dalej\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"copyrights\">\n            <span>2019, Created by <a target=\"_blank\" href=\"https://www.linkedin.com/in/agata-szczuka/\">szczupag</a></span>\n        </div>\n    </div>\n)\n\nexport default Template\n","import React from 'react'\nimport Template from './Template'\nimport diagram from '../assets/e00_diagram.png'\n\nconst Excercise = () => (\n  <Template nextStep=\"/struktura-html\">\n    <h2>Witaj na kursie!</h2>\n    <p>Dziękujemy za zapisanie się na charytatywny kurs - Podstawy HTML i CSS! Podczas warsztatów nauczysz się tworzyć proste strony internetowe, a także obsługiwać narzędzia z nimi związane.</p>\n    <p>Kurs podzielony jest na zadania. Każdy kolejny krok zbliży Cię do ukończenia Twojej pierwszej strony internetowej! W każdym rozdziale znajduje się krótki wstęp teoretyczny, który jest szerzej omawiany podczas trwania warsztatów, ale pozwoli Ci wrócić po ukończeniu kursu do interesujących Cię zagadnień.</p>\n    <h2>Planowanie</h2>\n    <p>Pomyśl o czym chcesz utworzyć stronę. Jakie informacje ma zawierać? Jakiego użyjesz tła, obrazów, kolorów, czcionek?</p>\n    <h2>Jakich narzędzi potrzebujemy? 🛠</h2>\n    <p>Minimum potrzebne do stworzenia strony www, to:</p>\n    <ul>\n      <li>edytor tekstu - notatnik lub IDE: Visual Studio Code, Atom, Brackets, Sublime Text</li>\n      <li>nowoczesna przeglądarka internetowa - Chorme, Firefox, Opera, Safari</li>\n    </ul>\n    <p>Podczas kursu zalecanym edytorem jest <a target=\"_blank\" href=\"https://code.visualstudio.com/\">Visual Studio Code</a> oraz przeglądarka Chrome.</p>\n    <h2>Jak w ogóle działa internet? 🤔</h2>\n    <p>Pomyśl o tym jak otwierasz swoją ulubioną stronę internetową. Czy wiesz co się dzieje po wpisaniu adresu URL w oknie przeglądarki? Co sprawia że strona się nam wyświetla?</p>\n    <h2>Adres URL</h2>\n    <p>Zacznijmy od przeanalizowania wpisywanych przez nas w przeglądarkach adresów URL. Składa się on z:</p>\n    <ul>\n      <li>protokołu http\n        <ul>\n          <li>http</li>\n          <li>https</li>\n          <li>ftp</li>\n        </ul>\n      </li>\n      <li>nazwy hosta (adresu serwera)</li>\n      <li>ścieżki dostępu do zasobu</li>\n    </ul>\n    <p>Wpisując adres w nowoczesnej przeglądarce nie musimy podawać protokołu. Jest on automatycznie dodawany przez przeglądarkę.</p>\n    <h2>DNS</h2>\n    <p>Prawdziwe adresy nie wyglądają zbyt ładnie. Są to unikalne adresy IP, składające się z ciągu liczb. Ciężko byłoby je zapamiętać w takiej formie. Dlatego z pomocą przychodzą serwery DNS, które tłumaczą znane nam adresy stron na ich prawdziwe adresy IP.</p>\n    <h2>🔥 Zadanie 🔥</h2>\n    <p>Wejdź na stronę <a target=\"_blank\" href=\"https://ipinfo.info/html/ip_checker.php\">IP Checker</a> i wpisz adres dowolnej strony internetowej (np. wp.pl) żeby sprawdzić jej adres IP. Następnie wpisz adres IP w oknie przeglądarki i przekonaj się czy strona zostanie wyświetlona.</p>\n    <h2>Jak to się dzieje...</h2>\n    <p>Co dokładnie dzieje się gdy wpisujemy w przeglądarce adres URL i wciskamy enter?</p>\n    <p>Role komputerów podłączonych do sieci internetowej dzielimy na klientów i serwery. Adres URL może prowadzić do różnych rodzajów plików zapisanych na serwerze. My będziemy rozpatrywać pliki o rozszerzeniu .html, które zawierają kontent stron internetowych. </p>\n    <img src={diagram} />\n    <a target=\"_blank\" className=\"img-source\" href=\"https://www.makeschool.com/academy/track/web-dev-summer-academy-2018/how-the-internet-works/how-the-internet-works\">Źródło: makeschool.com</a>\n    <ol>\n      <li>Przeglądarka pyta serwer DNS o prawdziwy adres serwera</li>\n      <li>Przeglądarka wysyła request HTTP do serwera (za pomocą protokołu TCP/IP) z prośbą o odesłanie pliku zawierającego stronę internetową</li>\n      <li>Jeśli serwer zaakceptuje żądanie klienta, odesyła wiadomość ze statusem 200 oraz pliki żądanej strony</li>\n      <li>Przeglądarka gromadzi nadesłane pliki i wyświetla stronę</li>\n    </ol>\n    <h2>HTML to nie język programowania</h2>\n    <p>HTML jest językiem znaczników wykorzystywanym do tworzenia stron internetowych, pozwalający opisać ich strukturę i podstawowy wygląd. Do zaawansowanego dostosowywania wyglądu elementów strony wykorzystywane są kaskadowe arkusze stylów (CSS). CSS to lista dyrektyw ustalających sposób w jaki ma zostać wyświetlona zawartość wybranych elementów HTML.</p>\n    {/* Kaskadowość oznacza, że zdefiniowane w stylach reguły dominują nad definicjami wcześniejszymi. */}\n    {/* <p>W wyborze kolorów może pomóc ci narzędzie <a target=\"_blank\" href=\"https://www.google.com/search?q=color+picker\">Color Picker</a>.</p>  */}\n    {/* <p>W <a target=\"_blank\" href=\"https://www.google.com/imghp?gws_rd=ssl\">Google Images</a> możesz znaleźć odpoiednie obrazy.</p>\n        <ul>\n            <li>Wyszukaj interesujący Cię obraz i kliknij w niego.</li>\n            <li>Kliknij prawym przyciskiem myszy na podgląd i wybierz <i>Zapisz obraz jako</i> i zapisz w folderze projektu.</li>\n        </ul> */}\n  </Template>\n)\n\nexport default Excercise\n","import React from 'react'\nimport Template from './Template'\nimport struktura from '../assets/e01_struktura.png'\n\nconst Excercise = () => (\n    <Template nextStep=\"/tagowanie-tekstu\">\n        <h2>HTML to język znaczników</h2>\n        <p>Podstawową jednostką języka HTML są zanczniki, zwane też tagami. Listę obsługiwanych tagów oraz ich przeznaczenie możesz sprawdzić <a target=\"_blank\" href=\"https://developer.mozilla.org/pl/docs/Web/HTML/Element\">tutaj</a>. Element HTML składa się z kontentu otoczonego tagiem otwierającym i zamykającym.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;p&gt;Witaj świecie!&lt;/p&gt;\n            </code>\n        </pre>\n        <p>Dodatkowo tagi mogą posiadać atrybuty. Zawierają one dodatkowe informacje o elemencie, które nie są widoczne dla użytkowników odwiedzających stronę. W poniższym przykładzie <i>class</i> jest nazwą atrybutu, a <i>powitanie</i> jest jego wartością. Atrybut class pozwala nadać elementowi identyfikator, który potem może być użyty na przykład do nadania stylu.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;p class=\"powitanie\"&gt;Witaj świecie!&lt;/p&gt;\n            </code>\n        </pre>\n        <h2>Deklaracja HTML</h2>\n        <p>Jak było wcześniej wspomniane, adres URL może prowadzić do różnego rodzaju plików, nie tylko stron internetowych. Aby przeglądarka rozpoznała nasz plik jako stronę www i poprawnie ją wyświetliła, należy umieścić na początku pliku deklarację:</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;!DOCTYPE HTML&gt;\n            </code>\n        </pre>\n        <p>Cały kod html naszej strony należy następnie umieścić w znaczniku <code class=\"prettyprint\" language=\"lang-html\">&lt;html&gt;</code></p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;!DOCTYPE HTML&gt;<br />\n                &lt;html&gt;<br /><br />\n                &lt;/html&gt;<br />\n            </code>\n        </pre>\n        <p>Ustawienia naszej strony umieszcza się w głowie <i>(head)</i> dokumentu. Zawiera się tam informacje m.in. o języku naszej strony, tytule, faviconie, a także innych metadanych wykorzystywanych przez przeglądarki internetowe.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;!DOCTYPE HTML&gt;<br />\n                &lt;html&gt;<br />\n                &nbsp;&nbsp;&lt;head&gt;<br />\n                &nbsp;&nbsp;&lt;/head&gt;<br />\n                &lt;/html&gt;<br />\n            </code>\n        </pre>\n        <p>Treść strony, czyli wszystko to co ma zostać wyświetlone umieszcza się w ciele dokumentu <i>(body)</i></p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;!DOCTYPE HTML&gt;<br />\n                &lt;html&gt;<br />\n                &nbsp;&nbsp;&lt;head&gt;<br />\n                &nbsp;&nbsp;&lt;/head&gt;<br />\n                &nbsp;&nbsp;&lt;body&gt;<br />\n                &nbsp;&nbsp;&lt;/body&gt;<br />\n                &lt;/html&gt;<br />\n            </code>\n        </pre>\n        <h2>Hello World! 👋🏼</h2>\n        <p>Stwórzmy naszą pierwszą stronę internetową!</p>\n        <p>Otwórz edytor tekstowy, utwórz nowy folder dla naszego projektu, a następnie swtórz plik o nazwie <i>index.html</i>. Przepisz lub skopiuj poniższy kod, zapisz zmiany i otwórz plik w przeglądarce - sprawdź rezultat!</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;!DOCTYPE HTML&gt;<br />\n                &lt;html lang=\"pl\"&gt;<br /><br />\n                &lt;head&gt;<br />\n                &nbsp;&nbsp;&lt;meta charset=\"utf-8\" /&gt;<br />\n                {/* &nbsp;&nbsp;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;<br /> */}\n                &lt;/head&gt;<br /><br />\n                &lt;body&gt;<br />\n                &nbsp;&nbsp;Witaj świecie!<br />\n                &lt;/body&gt;<br /><br />\n                &lt;/html&gt;\n            </code>\n        </pre>\n        <h2>Samozamykający się tag</h2>\n        <p>W powyższym kodzie pojawił się element <code class=\"prettyprint\">&lt;meta charset=\"utf-8\" /&gt;</code>, który wygląda trochę inaczej... Nie składa się bowiem ze znacznika otwierającego i zamykającego. Tego typu znaczniki nie zawierają treści, którą mogłyby wyświetlić. Nadal jednak mogą posiadać atrybuty. Oprócz tagu <i>meta</i> innym popularnym przykładem jest tag <i>img</i>, za pomocą którego umieszcza sie na stronie obraz. Ten tag również nie przyjmuje w środku treści, bo ścieżkę do docelowego pliku podaje się za pomocą atrybutu <i>src</i>.</p>\n        {/* <h2>Znaczniki struktury dokumentu HTML</h2>\n        <img src={struktura} />\n        <a target=\"_blank\" className=\"img-source\" href=\"http://www.kurshtmlcss.pl/kurs-html/lekcja1-struktura-dokumentu-html.php\">Źródło: kurshtmlcss.pl</a> */}\n        <h2>🔥 Zadanie 🔥</h2>\n        <p>Wymyśl tytuł dla swojej strony. Znajdź w dokumentacji odpowiedni tag do definiowania tytułu strony i umieść go w elemencie <i>head</i>.</p>\n    </Template>\n)\n\nexport default Excercise\n","import React from 'react'\nimport Template from './Template'\n\nconst Excercise = () => (\n    <Template nextStep=\"/lista\">\n        <h2>Tagowanie tekstu</h2>\n        <p>Tekst umieszczony przez nas w <i>body</i> został wyświetlony poprawnie w przeglądarce. Gdybyśmy dodali kolejne akapity tekstu, będą one wyświetlone ciągiem - nasz dokument nie jest uporządkowany i nie wygląda atrakcyjnie! Do porządkowania treści służą odpowiednie znaczniki.</p>\n        <h2>Nagłówki</h2>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;h1&gt;Główny nagłówek&lt;/h1&gt;<br />\n                &lt;h2&gt;Nagłówek drugiego rzędu&lt;/h2&gt;<br />\n                ...<br />\n                &lt;h6&gt;Nagłówek szóstego rzędu&lt;/h6&gt;<br />\n            </code>\n        </pre>\n        <p>Te elementy dzielą treść na nagłówki, podtytuły itp. Możemy nadać strukturę strony jak na przykład w książce - podzielić na tytuł główny, rozdziały, podrozdziały. Występuje sześć poziomów nagłówków.</p>\n        <h2>Paragrafy</h2>\n        <p>Tekst który właśnie czytasz jest owrapowany tagiem <code class=\"prettyprint\">&lt;p&gt;</code>, który służy do oznaczania zwykłej treści.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;p&gt;To jest paragraf&lt;/p&gt;\n            </code>\n        </pre>\n        <p>Jeśli chcemy umieścić część tekstu paragrafu<br />w nowej linii,<br />to użycie <i>enter</i> w edytorze niestety nie zadziała, ponieważ przeglądarka interpretując kod html pomija tzw. <i>białe znaki</i>. Zamiast tego należy użyć znacznika <code class=\"prettyprint\">&lt;br /&gt;</code><i> (break line).</i></p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;p&gt;To jest paragraf&lt;br /&gt;z tekstem w nowej linii.&lt;/p&gt;\n            </code>\n        </pre>\n        <h2>Linia horyzontalna</h2>\n        <p>Do odgradzania treści używa się elementu <code class=\"prettyprint\">&lt;hr /&gt;</code> <i>(horizontal rule)</i></p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;h1&gt;To jest tytuł&lt;/h1&gt;<br />\n                &lt;p&gt;To jest paragraf&lt;/p&gt;<br />\n                &lt;hr /&gt;<br />\n                &lt;p&gt;To jest odgrodzony paragraf&lt;/p&gt;<br />\n            </code>\n        </pre>\n        <h2>Linki</h2>\n        <p>Odnośniki <code class=\"prettyprint\">&lt;a&gt;Kliknij mnie&lt;/a&gt;</code> pozwalają utworzyć z tekstu \"klikalny\" link. Adres do którego ma on kierować umieszcza się w atrybucie <i>href</i>. Kliknięty link otwiera się domyślnie w tym samym oknie lub karcie przeglądarki. Możemy to zmienić przez określenie atrybutu <i>target</i>. Atrybut <i>target=\"_blank\"</i> sprawi, że link będzie otwierał się w nowej karcie.</p>\n        <h2>Linki wewnętrzne</h2>\n        <p>Linki nie muszą kierować do zewnętrznych stron. Mogą też prowadzić do sekcji na tej samej stronie. Należy zdefiniować atrybut <i>id</i> docelowego elementu i odnieść się do niego za pomocą znaku <i>#</i> w adresie linku.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;a href=\"#paragraf\"&gt;Kliknij mnie żeby przejść do paragrafu!&lt;/a&gt;<br />\n                &lt;p id=\"paragraf\"&gt;To jest paragraf&lt;/p&gt;<br />\n            </code>\n        </pre>\n        <h2>Zagnieżdżanie elementów</h2>\n        <p>Znaczniki możemy umieszczać wewnątrz innych znaczników, co nazywa się zagnieżdżaniem. Wewnątrz paragrafu możemy umieścić odnośniki lub możemy nadać pewnym elementom wyróżniający styl.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;p&gt;Ta treść zawiera efekt &lt;b&gt;pogrubienia&lt;/b&gt; i &lt;i&gt;kursywy&lt;/i&gt;&lt;/p&gt;<br />\n            </code>\n        </pre>\n        <p>Ta treść zawiera efekt <b>pogrubienia</b> i <i>kursywy</i></p>\n        <p>Inne przykłday elementów formatujących tekst to m.in.:</p>\n        <ul>\n          <li><code class=\"prettyprint\">&lt;mark&gt;</code> - wyróżnienie</li>\n          <li><code class=\"prettyprint\">&lt;s&gt;</code> - przekreślenie</li>\n          <li><code class=\"prettyprint\">&lt;sup&gt;</code> - indeks górny</li>\n          <li><code class=\"prettyprint\">&lt;sub&gt;</code> - indeks dolny</li>\n          <li><code class=\"prettyprint\">&lt;small&gt;</code> - pomniejszenie</li>\n        </ul>\n        <h2>Błędny znacznik!? 😱</h2>\n        <p>Co jeśli zrobimy literówkę i użyjemy znacznika który nie istnieje? Czy nasza strona przestanie działać? Na szczęście nic z tych rzeczy! Tagi nierozpoznane przez przeglądarkę zostaną zignorowane.</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;mytag&gt;Czy ja zostanę wyświetlony?&lt;/mytag&gt;<br />\n            </code>\n        </pre>\n        <h2>Inne błędy z którymi nie jest już tak przyjemnie...</h2>\n        <p><i><b>Syntaktyka</b> określa nam składnię danego języka, reguły poprawnego stosowania znaczników, atrybutów, encji.</i></p>\n        <p>Warto przyjąć bezpieczną zasadę, że przeglądarka nie jest dobrym weryfikatorem poprawności naszej strony. Bywają one czasem miłosierne i wyświetlają strony z błędami. O jakich błędach mowa? Chociażby niedomknięte znaczniki, albo niedozwolone ich przemieszczanie, jak poniżej:</p>\n        <pre class=\"prettyprint\">\n            <code language=\"lang-html\">\n                &lt;b&gt;&lt;i&gt;Nie jestem poprawnie zagnieżdżony&lt;/b&gt;&lt;/i&gt;<br />\n            </code>\n        </pre>\n        <p>Czasem może się wydawać, że błąd jest niewidoczny, ale w pratyce może on wpływać w nieoczekiwany sposób na wygląd całej strony! Dlatego warto używać zaawansowanych edytorów tekstowych, które automatycznie zamykają znaczniki i alarmują o potencjalnych błędach.</p>\n        <h2>🔥 Zadanie 🔥</h2>\n        <ol>\n          <li>Zastąp tekst <i>Witaj świecie!</i> głównym tytułem strony.</li>\n          <li>Utwórz dwie sekcje z nagłówkami i treścią. Odseparuj je linią horyzontalną.</li>\n          <li>Zastosuj w tekście dowolny znacznik formatujący treść.</li>\n          <li>Umieść w jedym z paragrafów link do wybranej przez Ciebie strony internetowej. Spraw by po kliknięciu otwierał się on w nowej karcie.</li>\n          <li>Spróbuj zapisać stronę z błędem, na przykład niedomkniętym znacznikiem. Sprawdź jak wpływa to na wygląd strony oraz czy twój edytor wykrył ten błąd.</li>\n          <li>Przed przejściem do kolejnego etapu napraw błąd i zapisz plik.</li>\n        </ol>\n    </Template>\n)\n\nexport default Excercise\n","import React from 'react'\nimport Template from './Template'\n\nconst Excercise = () => (\n  <Template nextStep=\"/obrazy\">\n    <h2>Lista</h2>\n    <p>Do grupowania treści używa się listy. Przypomina ona listę na zakupy lub spis treści. Dane w niej mogą być luźno wymienione lub uporządkowane.</p>\n    <h2>Lista nieuporządkowana</h2>\n    <p>Elementy w liście nieuporządkowanej są wypunktowane - domyślnie za pomocą kropki.</p>\n    <pre class=\"prettyprint\">\n      <code language=\"lang-html\">\n        &lt;ul&gt;<br />\n        &nbsp;&nbsp;&lt;li&gt;Chleb&lt;/li&gt;<br />\n        &nbsp;&nbsp;&lt;li&gt;Masło&lt;/li&gt;<br />\n        &lt;/ul&gt;<br />\n      </code>\n    </pre>\n    <ul>\n      <li>Chleb</li>\n      <li>Masło</li>\n    </ul>\n    <p>Listę uporządkowaną tworzymy przy pomocy znacznika <code class=\"prettyprint\">&lt;ul&gt;</code> (unordered list), a elementy listy umieszczamy w środku za pomocą znacznika <code class=\"prettyprint\">&lt;li&gt;</code> (list item).</p>\n    <h2>Lista uporządkowana</h2>\n    <p>W liście uporządkowanej wymienione elementy są numerowane przez liczby bądź litery:</p>\n    <ol>\n      <li>Posmarować chleb masłem</li>\n      <li>Położyć plaster sera</li>\n    </ol>\n    <p>Listę uporządkowaną tworzymy przy pomocy znacznika <code class=\"prettyprint\">&lt;ol&gt;</code> (ordered list). Inny rodzaj numerowania lub wypunktowania niż domyślny możemy uzyskać poprzez reguły CSS. Wrócimy do tego później!</p>\n    <h2>Lista definicji</h2>\n    <p>W liście definicyjnej przypisujemy do pojęcia jego definicję, tak jakbyśmy pisali słownik.</p>\n    <pre class=\"prettyprint\">\n      <code language=\"lang-html\">\n        &lt;dl&gt;<br />\n        &nbsp;&nbsp;&lt;dt&gt;Kurs ratuje Pawła&lt;/dt&gt;<br />\n        &nbsp;&nbsp;&lt;dd&gt;Charytatywny kurs z podstaw HTML i CSS&lt;/dd&gt;<br />\n        &lt;/dl&gt;<br />\n      </code>\n    </pre>\n    <dl>\n      <dt>Kurs ratuje Pawła</dt>\n      <dd>Charytatywny kurs z podstaw HTML i CSS</dd>\n    </dl>\n    <p>Listy definicyjne są przydatne do wyświetlania metadanych. Możliwe jest przypisanie jednej definicji wielu pojęć, jak i jednemu pojęciu wiele definicji.</p>\n    <h2>Zagnieżdżanie list</h2>\n    <p>A gdybyśmy tak chcieli rozwinąć nasze elementy listy o kolejne podpunkty? Rozwiązanie jest bardzo proste - wystarczy zawrzeć jedną listę w drugiej. Bez problemu możemy łączyć ze sobą różne rodzaje list.</p>\n    <ol>\n      <li>Posmarować chleb masłem</li>\n      <li>Położyć na chlebie:\n        <ul>\n          <li>Sałatę</li>\n          <li>Plaster sera</li>\n        </ul>\n      </li>\n    </ol>\n    <h2>🔥 Zadanie 🔥</h2>\n    <ol>\n      <li>Nadaj nagłówkom sekcji unikalne atrybuty id.</li>\n      <li>Pod tytułem umieść spis treści Twojej strony za pomocą listy uporządkowanej lub nieuporządkowanej.</li>\n      <li>Przekształć elementy listy tak, aby zawierały link kierujący do odpowiednich nagłówków. Element <i>a</i> powinien być zagnieżdżony w elemencie <i>li</i>: <code class=\"prettyprint\">&lt;li&gt;&lt;a href=\"...\"&gt;...&lt;/a&gt;&lt;/li&gt;</code></li>\n    </ol>\n  </Template>\n)\n\nexport default Excercise\n","import React from 'react'\nimport Template from './Template'\n\nconst Excercise = () => (\n  <Template nextStep=\"/\">\n    <h2>Zróbmy naszą stronę bardziej atrakcyjną</h2>\n    <p>Aby przyciągnąć czytelników najlepiej umieścić ciekawe grafiki lub obrazy.</p>\n    <p>W celu umieszczenia obrazu na stronie używa się elementu <i>img</i>, podając w jego atrybucie <i>src</i> ścieżkę do pliku. Ścieżka może prowadzić do pliku w folderze zawierającym nasz projekt lub umieszczonego na zewnętrznym serwerze.</p>\n    <pre class=\"prettyprint\">\n      <code language=\"lang-html\">\n        &lt;img src=\"malinka.png\" /&gt;<br />\n        &lt;img src=\"https://occupied-client.herokuapp.com/assets/img/malinka.png\" /&gt;<br />\n      </code>\n    </pre>\n    <h2>Tekst alternatywny</h2>\n    <p>Bardzo ważne jest, aby w każdym elemencie <i>img</i> definiować atrybut <i>alt</i> (tekst alternatywny) opisujący obraz. Tekst alternatywny pojawia się na stronie gdy plik źródłowy nie może zostać wczytany przez przeglądarkę, a także podczas interpretacji przez czytnik ekranowy, np. dla osoby niewidomej. Jest on też analizowany przez <i>roboty</i> wpływające na pozycjonowanie naszej strony.</p>\n    <p>Prawidłowy opis pozwala nam wyobrazić sobie co dokładnie przedstawia zdjęcie.</p>\n    <pre class=\"prettyprint\">\n      <code language=\"lang-html\">\n        &lt;img src=\"malinka.png\" alt=\"Logo\"/&gt; //średnie <br />\n        &lt;img src=\"malinka.png\" alt=\"Malinka\"/&gt; //nie najgorsze <br />\n        &lt;img src=\"malinka.png\" alt=\"Uśmiechnięta malinka siedząca na sedesie.\"/&gt; //bardzo dobre<br />\n      </code>\n    </pre>\n    <p>Do naszego obrazu możemy też dodać tytuł - będzie on wyświetlany po najechaniu kursorem na obraz</p>\n    <h2>🔥 Zadanie 🔥</h2>\n    <p>Znajdź w <a target=\"_blank\" href=\"https://www.google.com/imghp?gws_rd=ssl\">Google Images</a> obrazy pasujące do Twojej strony.</p>\n    <ul>\n      <li>Wyszukaj interesujący Cię obraz i kliknij w niego.</li>\n      <li>Kliknij prawym przyciskiem myszy na podgląd i wybierz <i>Zapisz obraz jako</i>, następnie zapisz plik w folderze projektu.</li>\n    </ul>\n    <p>Następnie umieść obraz pod tytułem strony i nadaj mu tekst alternatywny.</p>\n  </Template>\n)\n\nexport default Excercise\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Main from './Main'\nimport Fb from './Main/fb'\nimport e00 from './Excercises/e00'\nimport e01 from './Excercises/e01'\nimport e02 from './Excercises/e02'\nimport e03 from './Excercises/e03'\nimport e04 from './Excercises/e04'\n\nconst CustomRoute = ({ path, component, ...other }) => <Route path={path} component={component} {...other} />\n// const CustomRoute = ({ path, component, ...other }) => <Route path={`${process.env.PUBLIC_URL}/${path}`} component={component} {...other} />\n\nexport default function Routes(){\n  return (\n    <Switch>\n      <CustomRoute path=\"/wprowadzenie\" component={e00} />\n      <CustomRoute path=\"/struktura-html\" component={e01} />\n      <CustomRoute path=\"/tagowanie-tekstu\" component={e02} />\n      <CustomRoute path=\"/lista\" component={e03} />\n      <CustomRoute path=\"/obrazy\" component={e04} />\n      <CustomRoute path=\"/fb\" component={Fb} />\n      <CustomRoute path=\"/\" exact component={Main} />\n    </Switch>\n  );\n}","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport history from './services/history';\nimport Routes from './routes';\nimport ScrollToTop from './ScrollToTop';\n\nfunction App() {\n  return (\n    <BrowserRouter\n      history={history}\n      basename={process.env.PUBLIC_URL}\n    >\n      <ScrollToTop />\n      <Routes />\n    </BrowserRouter>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './style.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}